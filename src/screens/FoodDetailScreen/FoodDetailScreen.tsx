import React, { useState } from "react";
import { View, StyleSheet } from "react-native";
import Animated, {
  FadeInDown,
  useSharedValue,
  useAnimatedScrollHandler,
  useAnimatedStyle,
  interpolate,
  Extrapolate,
} from "react-native-reanimated";
import { showToast } from "@components/Toast";
import withScreenContainer from "@components/layouts/withScreenContainer";
import { COLORS, SIZES } from "@constants/index";
import phoImg from "../../../assets/category/pho.png";
import banhmiImg from "../../../assets/category/banhmi.png";
import goicuonImg from "../../../assets/category/goicuon.png";
import capheImg from "../../../assets/category/caphe.png";
import {
  FoodDetailHeader,
  FoodImage,
  RestaurantInfo,
  FoodInfo,
  FoodStats,
  FoodDescription,
  QuantitySelector,
  ActionButtons,
  SuggestedItems,
  SuggestedItem,
} from "./components";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const FoodDetailScreen = ({ navigation, route }: any) => {
  const [isFavorite, setIsFavorite] = useState(false);
  const scrollY = useSharedValue(0);
  const [quantity, setQuantity] = useState(1);

  const scrollHandler = useAnimatedScrollHandler({
    onScroll: (event) => {
      scrollY.value = event.contentOffset.y;
    },
  });

  const headerAnimatedStyle = useAnimatedStyle(() => {
    const opacity = interpolate(scrollY.value, [0, 100], [0, 1], Extrapolate.CLAMP);

    return {
      opacity,
      backgroundColor: `rgba(255, 255, 255, ${opacity})`,
    };
  });

  // Sample data for suggested items
  const suggestedItems: SuggestedItem[] = [
    {
      id: 1,
      image: phoImg,
      title: "Ph·ªü b√≤",
      subtitle: "C·ªï Sen",
      rating: 4.8,
      ratingCount: "1.5k",
      time: "15 ph√∫t",
      kcal: "350",
      price: "30.000ƒë",
      isFavorite: false,
    },
    {
      id: 2,
      image: banhmiImg,
      title: "Ph·ªü g√†",
      subtitle: "C·ªï Sen",
      rating: 4.6,
      ratingCount: "1.2k",
      time: "12 ph√∫t",
      kcal: "320",
      price: "30.000ƒë",
      isFavorite: false,
    },
    {
      id: 3,
      image: goicuonImg,
      title: "Ph·ªü b√≤ ƒë·∫∑c bi·ªát",
      subtitle: "C·ªï Sen",
      rating: 4.9,
      ratingCount: "2k",
      time: "18 ph√∫t",
      kcal: "400",
      price: "38.000ƒë",
      isFavorite: false,
    },
    {
      id: 4,
      image: capheImg,
      title: "Ph·ªü g√† ƒë·∫∑c bi·ªát",
      subtitle: "C·ªï Sen",
      rating: 4.7,
      ratingCount: "1.8k",
      time: "15 ph√∫t",
      kcal: "370",
      price: "38.000ƒë",
      isFavorite: false,
    },
  ];

  const handleAddToCart = () => {
    showToast({
      message: `ƒê√£ th√™m ${quantity} m√≥n v√†o gi·ªè h√†ng`,
      type: "success",
      duration: 2000,
    });
  };

  const handleCheckout = () => {
    showToast({
      message: "Chuy·ªÉn ƒë·∫øn trang thanh to√°n",
      type: "info",
      duration: 2000,
    });
  };

  const handleToggleFavorite = () => {
    setIsFavorite(!isFavorite);
    showToast({
      message: isFavorite ? "ƒê√£ b·ªè y√™u th√≠ch" : "ƒê√£ th√™m v√†o y√™u th√≠ch",
      type: isFavorite ? "info" : "success",
      duration: 2000,
    });
  };

  return (
    <View style={styles.container}>
      {/* Header */}
      <FoodDetailHeader
        onBackPress={() => navigation.goBack()}
        onSharePress={() => console.log("Share")}
        onMorePress={() => console.log("More")}
        animatedStyle={headerAnimatedStyle}
      />

      <Animated.ScrollView
        showsVerticalScrollIndicator={false}
        onScroll={scrollHandler}
        scrollEventThrottle={16}
      >
        {/* Food Image */}
        <FoodImage source={phoImg} />

        {/* Info Card */}
        <Animated.View entering={FadeInDown.delay(200).duration(400)} style={styles.infoCard}>
          {/* Restaurant Info */}
          <RestaurantInfo
            name="C·ªï Sen"
            icon="üçú"
            isFavorite={isFavorite}
            onToggleFavorite={handleToggleFavorite}
          />

          {/* Food Title */}
          <FoodInfo title={route?.params?.itemName ?? "Ph·ªü b√≤"} label="Th√¥-b√≤" />

          {/* Stats */}
          <FoodStats rating={4.8} orderCount="300+" deliveryTime="15 ph√∫t" />

          {/* Description */}
          <FoodDescription description="Ph·ªü b√≤ l√† m√≥n ƒÉn truy·ªÅn th·ªëng n·ªïi ti·∫øng c·ªßa Vi·ªát Nam, v·ªõi n∆∞·ªõc d√πng ƒë∆∞·ª£c h·∫ßm t·ª´ x∆∞∆°ng b√≤ c√πng c√°c gia v·ªã nh∆∞ qu·∫ø, h·ªìi, g·ª´ng, t·∫°o n√™n h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†. B√°nh ph·ªü m·ªÅm m·∫°i, th·ªãt b√≤ t∆∞∆°i ngon, ƒÉn k√®m v·ªõi rau th∆°m v√† sa t·∫ø l√†m m√≥n ƒÉn n√†y tr·ªü th√†nh l·ª±a ch·ªçn y√™u th√≠ch." />

          {/* Quantity Selector */}
          <QuantitySelector
            quantity={quantity}
            onIncrease={() => setQuantity(quantity + 1)}
            onDecrease={() => setQuantity(Math.max(1, quantity - 1))}
          />

          {/* Action Buttons */}
          <ActionButtons onAddToCart={handleAddToCart} onCheckout={handleCheckout} />
        </Animated.View>

        {/* Suggested Items */}
        <SuggestedItems items={suggestedItems} />
      </Animated.ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: COLORS.BACKGROUND,
    flex: 1,
  },
  infoCard: {
    backgroundColor: COLORS.BACKGROUND,
    borderTopLeftRadius: SIZES.RADIUS.EXTRA_LARGE,
    borderTopRightRadius: SIZES.RADIUS.EXTRA_LARGE,
    marginTop: -SIZES.SPACING.LG,
    paddingBottom: SIZES.SPACING.MD,
    paddingHorizontal: SIZES.SPACING.MD,
    paddingTop: SIZES.SPACING.LG,
  },
});

// Disable the ScreenContainer ScrollView for this screen because it uses VirtualizedLists / Animated.ScrollView
type _StaticOpts = { useScreenScroll?: boolean };
(FoodDetailScreen as unknown as _StaticOpts).useScreenScroll = false;

export default withScreenContainer(FoodDetailScreen);
