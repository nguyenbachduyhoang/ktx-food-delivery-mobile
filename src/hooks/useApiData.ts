import { useState, useEffect } from "react";
import { merchantService } from "../services/merchantService";
import { menuCategoryService } from "../services/menuCategoryService";
import { merchantCategoryService } from "../services/merchantCategoryService";
import { userService } from "../services/userService";
import { Merchant, MenuCategory, User, MerchantCategory } from "../types/menu";

// Hook ƒë·ªÉ l·∫•y danh s√°ch nh√† h√†ng
export const useMerchants = (categoryId?: string) => {
  const [merchants, setMerchants] = useState<Merchant[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchMerchants = async () => {
      try {
        setLoading(true);
        setError(null);

        let data: Merchant[];
        if (categoryId) {
          data = await merchantService.getMerchantsByCategory(categoryId);
        } else {
          data = await merchantService.getAllMerchants();
        }

        setMerchants(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Unknown error");
        console.error("Error fetching merchants:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchMerchants();
  }, [categoryId]);

  return { merchants, loading, error };
};

// Hook ƒë·ªÉ l·∫•y danh s√°ch danh m·ª•c m√≥n ƒÉn
export const useMenuCategories = (merchantId?: string) => {
  const [categories, setCategories] = useState<MenuCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        setError(null);

        const data = await menuCategoryService.getAllMenuCategories(merchantId);
        setCategories(data);
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : "Unknown error";
        setError(errorMessage);
        console.error("Error fetching menu categories:", err);
        // Set empty array ƒë·ªÉ app kh√¥ng crash
        setCategories([]);
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, [merchantId]);

  return { categories, loading, error };
};

// Hook ƒë·ªÉ l·∫•y th√¥ng tin user hi·ªán t·∫°i
export const useCurrentUser = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        setLoading(true);
        setError(null);

        const data = await userService.getCurrentUser();
        setUser(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Unknown error");
        console.error("Error fetching current user:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, []);

  return { user, loading, error };
};

// Hook ƒë·ªÉ l·∫•y danh s√°ch danh m·ª•c merchant
export const useMerchantCategories = () => {
  const [categories, setCategories] = useState<MerchantCategory[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fallback categories khi API kh√¥ng ho·∫°t ƒë·ªông
  const fallbackCategories: MerchantCategory[] = [
    {
      merchantCategoryId: 1,
      name: "C√† Ph√™/Tr√†",
      imageUrl: "https://via.placeholder.com/80x80/8B4513/FFFFFF?text=‚òï",
      description: "C√† ph√™ v√† tr√† c√°c lo·∫°i",
      isActive: true,
    },
    {
      merchantCategoryId: 2,
      name: "Tr√† s·ªØa",
      imageUrl: "https://via.placeholder.com/80x80/FF69B4/FFFFFF?text=üßã",
      description: "Tr√† s·ªØa v√† ƒë·ªì u·ªëng",
      isActive: true,
    },
    {
      merchantCategoryId: 3,
      name: "B√°nh M√¨/X√¥i",
      imageUrl: "https://via.placeholder.com/80x80/DEB887/FFFFFF?text=ü•ñ",
      description: "B√°nh m√¨ v√† x√¥i",
      isActive: true,
    },
    {
      merchantCategoryId: 4,
      name: "Th·ª©c ƒÉn nhanh",
      imageUrl: "https://via.placeholder.com/80x80/FF6347/FFFFFF?text=üçî",
      description: "Hamburger v√† th·ª©c ƒÉn nhanh",
      isActive: true,
    },
    {
      merchantCategoryId: 5,
      name: "C∆°m/C∆°m t·∫•m",
      imageUrl: "https://via.placeholder.com/80x80/FFD700/FFFFFF?text=üçö",
      description: "C∆°m v√† c∆°m t·∫•m",
      isActive: true,
    },
    {
      merchantCategoryId: 6,
      name: "B√∫n/Ph·ªü/M·ª≥/Ch√°o",
      imageUrl: "https://via.placeholder.com/80x80/FFA500/FFFFFF?text=üçú",
      description: "B√∫n, ph·ªü, m·ª≥ v√† ch√°o",
      isActive: true,
    },
    {
      merchantCategoryId: 7,
      name: "ƒÇn v·∫∑t",
      imageUrl: "https://via.placeholder.com/80x80/FF1493/FFFFFF?text=üçø",
      description: "ƒê·ªì ƒÉn v·∫∑t",
      isActive: true,
    },
    {
      merchantCategoryId: 8,
      name: "L·∫©u&N∆∞·ªõng",
      imageUrl: "https://via.placeholder.com/80x80/DC143C/FFFFFF?text=üç≤",
      description: "L·∫©u v√† n∆∞·ªõng",
      isActive: true,
    },
    {
      merchantCategoryId: 9,
      name: "Pizza",
      imageUrl: "https://via.placeholder.com/80x80/FF4500/FFFFFF?text=üçï",
      description: "Pizza c√°c lo·∫°i",
      isActive: true,
    },
  ];

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        setError(null);

        const data = await merchantCategoryService.getAllMerchantCategories();
        
        // N·∫øu API tr·∫£ v·ªÅ m·∫£ng r·ªóng (c√≥ th·ªÉ do l·ªói 401), s·ª≠ d·ª•ng fallback
        if (data.length === 0) {
          console.log("useMerchantCategories: Using fallback categories");
          setCategories(fallbackCategories);
        } else {
          setCategories(data);
        }
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : "Unknown error";
        setError(errorMessage);
        console.error("Error fetching merchant categories:", err);
        // S·ª≠ d·ª•ng fallback categories khi c√≥ l·ªói
        console.log("useMerchantCategories: Using fallback categories due to error");
        setCategories(fallbackCategories);
      } finally {
        setLoading(false);
      }
    };

    fetchCategories();
  }, []);

  return { categories, loading, error };
};
